const fs = require('fs')
const path = require('path')

const { GoogleGenerativeAI } = require('@google/generative-ai')
const { splitMessage } = require('../utils/splitmessages')
const { destinate_channel_Id } = require('../config/myconfig.json')
const { gemini_api_token } = require('../config/myconfig.json')
const { writeMemoryLog, getMemoryLog } = require('../utils/writelog')
const { createBasePromptForUser } = require('../services/basepersonal_users')
const { authorId } = require('../config/myconfig.json')
const { createBasePromptForAuthor } = require('../services/basepersonal_author')
const { getAllFilesFromCodeBase, getAllContentOutOfSrc } = require('../config/codebase')
const { getFlagCheck } = require('../events/flagcodebase')

// --------
const pathUser = path.join(__dirname, '../config/personaluser.json')
const pathBot = path.join(__dirname, '../config/personalbot.json')
const pathAuthor = path.join(__dirname, '../config/personalauthor.json')
// readFileSync l√† ƒë·ªçc n·ªôi dung trong file, c√≤n readdirSync l√† li·ªát k√™ file trong th∆∞ m·ª•c
const personalUser = JSON.parse(fs.readFileSync(pathUser), 'utf-8')
const personalBot = JSON.parse(fs.readFileSync(pathBot), 'utf-8')
const personalAuthor = JSON.parse(fs.readFileSync(pathAuthor), 'utf-8')

const genAI = new GoogleGenerativeAI(gemini_api_token)

async function modelAI(client, userId, textInput) {
    let retries = 3
    const selectSystemInstruction = userId === authorId ? createBasePromptForAuthor(personalAuthor, personalBot) : createBasePromptForUser(personalUser, personalBot)

    let codeBaseContext = "Kh√¥ng c√≥ th√¥ng tin"
    let codeBaseContentOutOfSrc = "Kh√¥ng c√≥ th√¥ng tin"
    if (getFlagCheck() === true){
      if (userId === authorId){
        const files = await getAllFilesFromCodeBase()
        const filesOutOfSrc = await getAllContentOutOfSrc()
        codeBaseContext = files.map(f => `üìÅ [${f.folder}] ${f.file}\n${f.content}`).join('\n\n')
        codeBaseContentOutOfSrc = filesOutOfSrc.map(f => `üìÑ ${f.file}\n${f.content}`).join('\n\n')
      }
    }

    const model = genAI.getGenerativeModel({
      model: "gemini-2.5-flash",
      systemInstruction : `${selectSystemInstruction}\n\n 
      V√† ƒë√¢y l√† nh·ªØng d√≤ng code t·∫°o ra ch√≠nh b·∫°n: ${codeBaseContext}\n\n
      V√† ƒë√¢y c≈©ng l√† nh·ªØng d√≤ng code t·∫°o ra ch√≠nh b·∫°n, nh∆∞ng ·ªü b√™n ngo√†i th∆∞ m·ª•c source code: ${codeBaseContentOutOfSrc}\n\n
      ‚ö†Ô∏è N·∫øu t·∫•t c·∫£ ƒë·ªÅu l√† "Kh√¥ng c√≥ th√¥ng tin", b·∫°n kh√¥ng ƒë∆∞·ª£c ƒëo√°n. H√£y th√†nh th·∫≠t r·∫±ng b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p codebase. Ng∆∞·ªùi ki·ªÉm tra b·∫°n c√≥ th·ªÉ l√† ch√≠nh Author, l√† ng∆∞·ªùi c√≥ UserID l√† 607183227911667746.`
    })
    const destinateChannel = await client.channels.fetch(destinate_channel_Id)
    const memoryLog = getMemoryLog(userId, 20)

    while (retries--){
      try {
        memoryLog.push({
          role: "user",
          parts: [{ text: textInput }]
        })
      const result = await model.generateContent({contents: memoryLog})
      const response = result.response
      const text = response.text()

      if (text.length > 0){
        const chunkMessages = splitMessage(text)
        for (const chunk of chunkMessages){
          await destinateChannel.send(chunk)
        }
        writeMemoryLog({
          userId,
          prompt: textInput,
          response: text
        })
      }
      return;
    } catch (error){
      if (error.status == 503 && retries > 0) {
        console.warn("Ph√≠a Gemini Server b·ªã qu√° t·∫£i")   
        await new Promise(res => setTimeout(res, 2000))
        continue; 
    }
    console.error(error)
    await destinateChannel.send("AI b·ªã ngu r·ªìi, th√¥ng c·∫£m, h√£y th·ª≠ l·∫°i xem")
    return;
  }
}
}

module.exports = { modelAI }
